import os
import re

# def clean_text(content):
#     lines = content.splitlines()
#     cleaned = []
#     buffer = ""

#     for line in lines:
#         line = line.strip()

#         # –ü—Ä–æ–ø—É—Å–∫ –Ω–æ–º–µ—Ä—ñ–≤ —Ç–∞ —Ç–∞–π–º–∫–æ–¥—ñ–≤
#         if re.match(r"^\d+$", line):
#             continue
#         if re.match(r"^\d\d:\d\d:\d\d\.\d+ -->", line):
#             continue
#         if line == "":
#             if buffer:
#                 cleaned.append(buffer.strip())
#                 buffer = ""
#             continue

#         buffer += " " + line

#     if buffer:
#         cleaned.append(buffer.strip())

#     return "\n\n".join(cleaned)

def clean_text(content):
    lines = content.splitlines()
    cleaned = []
    date_line = ""
    output_buffer = []

    # 1. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä—à–∏–π –Ω–µ–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ (–¥–∞—Ç—É)
    for line in lines:
        if line.strip():
            date_line = line.strip()
            break

    current_timecode = None

    for line in lines:
        line = line.strip()

        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –Ω–æ–º–µ—Ä–∏ —Ä—è–¥–∫—ñ–≤
        if re.match(r"^\d+$", line):
            continue

        # –¢–∞–π–º–∫–æ–¥
        if re.match(r"^\d\d:\d\d:\d\d\.\d+ -->", line):
            current_timecode = line
            output_buffer.append(f"{date_line}   {current_timecode}")
            continue

        # –ü–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –∑–∞–≤–µ—Ä—à—É—î –ø–æ—Ç–æ—á–Ω–∏–π –±–ª–æ–∫
        if line == "":
            if output_buffer and output_buffer[-1] != "":
                output_buffer.append("")
            continue

        # –î–æ–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç, —è–∫—â–æ —Ü–µ –Ω–µ —Ç–∞–π–º–∫–æ–¥ —ñ –Ω–µ –Ω–æ–º–µ—Ä
        if current_timecode:
            output_buffer.append(line)
        else:
            # –Ü–≥–Ω–æ—Ä—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–æ –ø–µ—Ä—à–æ–≥–æ —Ç–∞–π–º–∫–æ–¥—É
            continue

    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–π–≤—ñ –ø—É—Å—Ç—ñ —Ä—è–¥–∫–∏
    # cleaned = [s for s in output_buffer if s.strip() != ""]
    cleaned = output_buffer
    return "\n".join(cleaned)


def process_transcripts(input_folder, output_file):
    with open(output_file, 'w', encoding='utf-8') as outfile:
        for filename in os.listdir(input_folder):
            if filename.endswith(".txt"):
                filepath = os.path.join(input_folder, filename)
                with open(filepath, 'r', encoding='utf-8') as f:
                    content = f.read()
                    cleaned = clean_text(content)
                    outfile.write(cleaned + "\n\n")

# üöÄ –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó:
process_transcripts("raw_transcript", "data_base.txt")

